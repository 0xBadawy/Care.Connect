using System.IO;
using Firebase;
using Firebase.Database;
using Firebase.Database.Query;
using Newtonsoft.Json.Linq;
using Firebase.Database.Streaming;
using Microsoft.VisualBasic;
using Microsoft.VisualBasic.Logging;
using System.Collections;
using Microsoft.VisualBasic.ApplicationServices;
using System.Linq.Expressions;

using System.Net.Http;
using System.Net;
using System.IO;
using static System.Windows.Forms.AxHost;


namespace MainServer
{

    public partial class Form1 : Form
    {
        Firebase.Database.FirebaseClient FireClient;


        string url = "";
        Rootobject rootobject;
        private const string ApiKey = "PITmMtX8zjb9IeC4sjnmTiWT8zCCyp3uSvJ4QCjyENxapT6vaPGtmrZOcbHuLFLP";
        private const string BaseUrl = "https://api.distancematrix.ai/maps/api/distancematrix/json";
        public Form1()
        {
            InitializeComponent();
            FireClient = new Firebase.Database.FirebaseClient("https://careconnect-1c393-default-rtdb.firebaseio.com/");
        }


        private void Form1_Load(object sender, EventArgs e)
        {
            // -----  the following query gets the added collection in Emegency collection in firebase -------
            var obserable = FireClient.Child("CareConnect/Emergency").AsObservable<object>();
            var Subscription = obserable.Subscribe(async snapshot =>
            {
                if (snapshot.EventType == FirebaseEventType.InsertOrUpdate)
                {
                    string CollectionName = snapshot.Key;  // a random id for each record in emergency collection will be generated by flutter app
                    Emergency emegency = new Emergency();

                    emegency.Ambulance = await FireClient.Child($"CareConnect/Emergency/{CollectionName}/AmbulaceId").OnceSingleAsync<string>();
                    emegency.Location = await FireClient.Child($"CareConnect/Emergency/{CollectionName}/location").OnceSingleAsync<string>();
                    emegency.FingerPrint = await FireClient.Child($"CareConnect/Emergency/{CollectionName}/FingerPrint").OnceSingleAsync<string>();

                    MessageBox.Show(emegency.ToString());

                    // CalculateDistance(emegency.Location);

                    // Call the delete function after displaying the record
                    await DeleteRecord(CollectionName);
                }
            });
        }

        // Function to delete a record from the Firebase database
        private async Task DeleteRecord(string collectionName)
        {
            try
            {
                await FireClient.Child($"CareConnect/Emergency/{collectionName}").DeleteAsync();
                MessageBox.Show($"Record {collectionName} deleted successfully.");
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error deleting record {collectionName}: {ex.Message}");
            }
        }







        public void CalculateDistance(string location)
        {
            string x = "", y = "";
            try
            {
                x = location.Split(',')[0];
                y = location.Split(',')[1];

            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }

            Dictionary<string, Tuple<double, double>> Data = new Dictionary<string, Tuple<double, double>>();
            Tuple<double, double> MyLocation = Tuple.Create(double.Parse(x), double.Parse(y));


            Data["Hospital1"] = Tuple.Create(25.7310834, 32.7027886);
            Data["Hospital2"] = Tuple.Create(26.0550735, 32.7796929);
            Data["Hospital3"] = Tuple.Create(26.1691376, 32.6348107);
            Data["Hospital4"] = Tuple.Create(26.1472582, 32.5270074);
            Data["Hospital5"] = Tuple.Create(25.9876543, 32.8765432);
            Data["Hospital6"] = Tuple.Create(26.1234567, 32.7654321);
            Data["Hospital7"] = Tuple.Create(25.5432109, 32.6543210);
            Data["Hospital8"] = Tuple.Create(26.6789123, 32.5432109);
            Data["Hospital9"] = Tuple.Create(25.4321098, 32.4321098);
            Data["Hospital10"] = Tuple.Create(26.3210987, 32.3210987);
            Data["Hospital11"] = Tuple.Create(25.8765432, 32.9876543);
            Data["Hospital12"] = Tuple.Create(26.7654321, 32.8765432);
            Data["Hospital13"] = Tuple.Create(25.6543210, 32.7654321);
            Data["Hospital14"] = Tuple.Create(26.5432109, 32.6543210);
            Data["Hospital15"] = Tuple.Create(25.4321098, 32.5432109);
            Data["Hospital16"] = Tuple.Create(26.3210987, 32.4321098);
            Data["Hospital17"] = Tuple.Create(25.2109876, 32.3210987);
            Data["Hospital18"] = Tuple.Create(26.1098765, 32.2109876);
            Data["Hospital19"] = Tuple.Create(25.0987654, 32.1098765);
            Data["Hospital20"] = Tuple.Create(26.9876543, 32.0987654);
            Data["Hospital21"] = Tuple.Create(25.8765432, 32.9876543);
            Data["Hospital22"] = Tuple.Create(26.7654321, 32.8765432);
            Data["Hospital23"] = Tuple.Create(25.6543210, 32.7654321);
            Data["Hospital24"] = Tuple.Create(26.5432109, 32.6543210);
            Data["Hospital25"] = Tuple.Create(25.4321098, 32.5432109);
            Data["Hospital26"] = Tuple.Create(26.3210987, 32.4321098);
            Data["Hospital27"] = Tuple.Create(25.2109876, 32.3210987);
            Data["Hospital28"] = Tuple.Create(26.1098765, 32.2109876);
            Data["Hospital29"] = Tuple.Create(25.0987654, 32.1098765);
            Data["Hospital30"] = Tuple.Create(26.9876543, 32.0987654);
            Data["Hospital31"] = Tuple.Create(25.8765432, 32.9876543);
            Data["Hospital32"] = Tuple.Create(26.7654321, 32.8765432);
            Data["Hospital33"] = Tuple.Create(25.6543210, 32.7654321);
            Data["Hospital34"] = Tuple.Create(26.5432109, 32.6543210);
            Data["Hospital35"] = Tuple.Create(25.4321098, 32.5432109);
            Data["Hospital36"] = Tuple.Create(26.3210987, 32.4321098);
            Data["Hospital37"] = Tuple.Create(25.2109876, 32.3210987);
            Data["Hospital38"] = Tuple.Create(26.1098765, 32.2109876);
            Data["Hospital39"] = Tuple.Create(25.0987654, 32.1098765);
            Data["Hospital40"] = Tuple.Create(26.9876543, 32.0987654);
            Data["Hospital41"] = Tuple.Create(25.8765432, 32.9876543);
            Data["Hospital42"] = Tuple.Create(26.7654321, 32.8765432);
            Data["Hospital43"] = Tuple.Create(25.6543210, 32.7654321);
            Data["Hospital44"] = Tuple.Create(26.5432109, 32.6543210);
            Data["Hospital45"] = Tuple.Create(25.4321098, 32.5432109);
            Data["Hospital46"] = Tuple.Create(26.3210987, 32.4321098);
            Data["Hospital47"] = Tuple.Create(25.2109876, 32.3210987);
            Data["Hospital48"] = Tuple.Create(26.1098765, 32.2109876);
            Data["Hospital49"] = Tuple.Create(25.0987654, 32.1098765);
            Data["Hospital50"] = Tuple.Create(26.9876543, 32.0987654);



            Dictionary<string, double> Distance = CalculateDistance(Data, MyLocation);

            string result = "";

            foreach (var item in Distance)
            {

                string Hospitallocation = Data[item.Key].Item1 + "," + Data[item.Key].Item2;

                //double Res= APIDataDistance(location, Hospitallocation);

                //         result += (item.Key + " : " + Res + "" + "\n");
            }
            richTextBox1.Text = result;

        }

        public Dictionary<string, double> CalculateDistance(Dictionary<string, Tuple<double, double>> data, Tuple<double, double> MyLocation)
        {

            Dictionary<string, double> diatace = new Dictionary<string, double>();
            foreach (var item in data)
            {
                double x = Math.Pow((item.Value.Item1 - MyLocation.Item1), 2);
                double y = Math.Pow((item.Value.Item2 - MyLocation.Item2), 2);
                double distance = Math.Sqrt(x + y);
                diatace[item.Key] = (float)distance;
            }

            Dictionary<string, double> Distance = diatace;
            Distance = Distance.OrderBy(x => x.Value).ToDictionary(x => x.Key, x => x.Value);

            return Distance.Take(5).ToDictionary(x => x.Key, x => x.Value);
        }






        // --------------------------- Distance API ------------------------------------------------------
        public Dictionary<string, string> APIData(string origin, string destination)
        {
            var dataDict = new Dictionary<string, string>();
            try
            {
                string url = $"{BaseUrl}?origins={origin}&destinations={destination}&key={ApiKey}";

                HttpWebRequest request = (HttpWebRequest)WebRequest.Create(url);
                using (var response = request.GetResponse())
                using (var streamReader = new StreamReader(response.GetResponseStream()))
                {
                    string data = streamReader.ReadToEnd();
                    Rootobject rootObject = Newtonsoft.Json.JsonConvert.DeserializeObject<Rootobject>(data);

                    string distance = rootObject.rows[0].elements[0].distance.text;
                    string duration = rootObject.rows[0].elements[0].duration.text;
                    string destinationAddress = rootObject.destination_addresses[0];
                    string originAddress = rootObject.origin_addresses[0];

                    dataDict.Add("Distance", distance);
                    dataDict.Add("Duration", duration);
                    dataDict.Add("Destination", destinationAddress);
                    dataDict.Add("Origin", originAddress);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }

            return dataDict;
        }
        private float APIDataDistance(string Strat, string End)
        {
            string distance = APIData(Strat, End)["Distance"];
            string[] distanceArr = distance.Split(' ');
            return float.Parse(distanceArr[0]);
        }
        private float APIDataDuration(string Strat, string End)
        {
            string duration = APIData(Strat, End)["Duration"];
            string[] durationArr = duration.Split(' ');
            return float.Parse(durationArr[0]);
        }
        private string APIDataDestination(string Strat, string End)
        {
            return APIData(Strat, End)["Destination"];
        }
        private string APIDataOrigin(string Strat, string End)
        {
            return APIData(Strat, End)["Origin"];
        }

        // --------------------------- End Distance API ------------------------------------------------------


    }
}
